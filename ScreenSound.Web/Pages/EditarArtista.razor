@page "/EditarArtista/{NomeArtista}"
@inject ArtistaAPI artistasAPI
@inject NavigationManager navigationManager


<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">
    <div class="d-flex justify-space-between mt-8">
        <MudText Typo="Typo.h4"> Edição de Artista </MudText>
        <div><MudButton OnClick="Voltar" Variant="Variant.Filled" Color="Color.Secondary">Voltar</MudButton></div>
    </div>
    <MudForm>

        <MudTextField Class="mt-4" T="string" Placeholder="Nome do Artista"
                      Variant="Variant.Outlined"
                      @bind-Value="nome"
                      Required="true"
                      RequiredError="Campo obrigatório." />

        <MudTextField Class="mt-4" T="string" Placeholder="Biografia do artista"
                      Variant="Variant.Outlined"
                      @bind-Value="biografia"
                      Lines="4"
                      Required="true"
                      RequiredError="Campo obrigatório." />

        <div class="d-flex align-center justify-space-between mt-4">
            <MudButton Variant="Variant.Filled"
                       OnClick="Deletar"
                       Color="Color.Error"
                       Class="ml-auto">
                Deletar
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       OnClick="Atualizar"
                       Color="Color.Success"
                       Class="ml-4">
                Atualizar
            </MudButton>
        </div>

    </MudForm>
</MudPaper>




@code {
    private string? nome;
    private string? biografia;
    [Parameter]
    public string? NomeArtista{ get; set; }
    public ArtistaResponse? Artista { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Artista = await artistasAPI.GetArtistaPorNomeAsync(NomeArtista!);
        nome = Artista!.Nome;
        biografia = Artista!.Bio;

    }


    private async Task Deletar()
    {

        await artistasAPI.DeleteArtistaAsync(Artista!.Id);
        navigationManager.NavigateTo("/Artistas");
    }

    private async Task Atualizar()
    {
        ArtistaRequestEdit artistaRequestEdit = new(Artista.Id, nome, biografia);

        await artistasAPI.AtualizarArtistaAsync(artistaRequestEdit);
        navigationManager.NavigateTo("/Artistas");
    }

private void Voltar()
{
    navigationManager.NavigateTo("/Artistas");
}

    

}
